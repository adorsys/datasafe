{"ast":null,"code":"\"use strict\";\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FiletreeComponent = exports.AddFolderDialog = exports.DynamicDataSource = exports.DynamicDatabase = exports.DynamicFlatNode = void 0;\nvar tree_1 = require(\"@angular/cdk/tree\");\nvar rxjs_1 = require(\"rxjs\");\nvar operators_1 = require(\"rxjs/operators\");\nvar api_service_1 = require(\"../../service/api/api.service\");\nvar credentials_service_1 = require(\"../../service/credentials/credentials.service\");\nvar router_1 = require(\"@angular/router\");\nvar app_component_1 = require(\"../../app.component\");\nvar dialog_1 = require(\"@angular/material/dialog\");\nvar i0 = require(\"@angular/core\");\nvar i1 = require(\"@angular/cdk/tree\");\nvar i2 = require(\"@angular/material/dialog\");\nvar i3 = require(\"@angular/forms\");\nvar i4 = require(\"@angular/material/button\");\nvar i5 = require(\"@angular/material/input\");\nvar i6 = require(\"@angular/material/form-field\");\nvar i7 = require(\"../../service/api/api.service\");\nvar i8 = require(\"../../service/credentials/credentials.service\");\nvar i9 = require(\"@angular/router\");\nvar i10 = require(\"@angular/common\");\nvar i11 = require(\"@angular/material/icon\");\nvar i12 = require(\"@angular/material/progress-bar\");\nvar i13 = require(\"@angular/material/tree\");\nfunction FiletreeComponent_mat_tree_node_14_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"button\", 0);\n    i0.ɵɵlistener(\"click\", function FiletreeComponent_mat_tree_node_14_div_6_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r9);\n      var node_r4 = i0.ɵɵnextContext().$implicit;\n      var ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.downloadFile(node_r4.path));\n    });\n    i0.ɵɵelementStart(2, \"mat-icon\", 10);\n    i0.ɵɵtext(3, \"cloud_download\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"button\", 0);\n    i0.ɵɵlistener(\"click\", function FiletreeComponent_mat_tree_node_14_div_6_Template_button_click_4_listener() {\n      i0.ɵɵrestoreView(_r9);\n      var node_r4 = i0.ɵɵnextContext().$implicit;\n      var ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.deleteFile(node_r4.path));\n    });\n    i0.ɵɵelementStart(5, \"mat-icon\", 10);\n    i0.ɵɵtext(6, \"delete_forever\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction FiletreeComponent_mat_tree_node_14_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r13 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-tree-node\", 7, 8);\n    i0.ɵɵlistener(\"mouseenter\", function FiletreeComponent_mat_tree_node_14_Template_mat_tree_node_mouseenter_0_listener() {\n      i0.ɵɵrestoreView(_r13);\n      var _r5 = i0.ɵɵreference(1);\n      return i0.ɵɵresetView(_r5.setAttribute(\"over\", \"true\"));\n    })(\"mouseleave\", function FiletreeComponent_mat_tree_node_14_Template_mat_tree_node_mouseleave_0_listener() {\n      i0.ɵɵrestoreView(_r13);\n      var _r5 = i0.ɵɵreference(1);\n      return i0.ɵɵresetView(_r5.setAttribute(\"over\", \"false\"));\n    });\n    i0.ɵɵelementStart(2, \"button\", 9)(3, \"mat-icon\");\n    i0.ɵɵtext(4, \"cloud\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtext(5);\n    i0.ɵɵtemplate(6, FiletreeComponent_mat_tree_node_14_div_6_Template, 7, 0, \"div\", 6);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    var node_r4 = ctx.$implicit;\n    var _r5 = i0.ɵɵreference(1);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\" \", node_r4.name, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", _r5.getAttribute(\"over\") === \"true\");\n  }\n}\nfunction FiletreeComponent_mat_tree_node_15_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r21 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"button\", 0);\n    i0.ɵɵlistener(\"click\", function FiletreeComponent_mat_tree_node_15_div_8_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r21);\n      i0.ɵɵnextContext();\n      var _r17 = i0.ɵɵreference(7);\n      return i0.ɵɵresetView(_r17.click());\n    });\n    i0.ɵɵelementStart(2, \"mat-icon\");\n    i0.ɵɵtext(3, \"cloud_upload\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"button\", 16);\n    i0.ɵɵlistener(\"click\", function FiletreeComponent_mat_tree_node_15_div_8_Template_button_click_4_listener($event) {\n      i0.ɵɵrestoreView(_r21);\n      var ctx_r22 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r22.addUiFolderWithpathFromName($event));\n    });\n    i0.ɵɵelementStart(5, \"mat-icon\");\n    i0.ɵɵtext(6, \"create_new_folder\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"button\", 0);\n    i0.ɵɵlistener(\"click\", function FiletreeComponent_mat_tree_node_15_div_8_Template_button_click_7_listener() {\n      i0.ɵɵrestoreView(_r21);\n      var node_r15 = i0.ɵɵnextContext().$implicit;\n      var ctx_r23 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r23.deleteFile(node_r15.path));\n    });\n    i0.ɵɵelementStart(8, \"mat-icon\", 10);\n    i0.ɵɵtext(9, \"delete_forever\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    var node_r15 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵpropertyInterpolate(\"name\", node_r15.path);\n  }\n}\nfunction FiletreeComponent_mat_tree_node_15_mat_progress_bar_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-progress-bar\", 17);\n  }\n}\nfunction FiletreeComponent_mat_tree_node_15_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r27 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-tree-node\", 7, 11);\n    i0.ɵɵlistener(\"mouseenter\", function FiletreeComponent_mat_tree_node_15_Template_mat_tree_node_mouseenter_0_listener() {\n      i0.ɵɵrestoreView(_r27);\n      var _r16 = i0.ɵɵreference(1);\n      return i0.ɵɵresetView(_r16.setAttribute(\"over\", \"true\"));\n    })(\"mouseleave\", function FiletreeComponent_mat_tree_node_15_Template_mat_tree_node_mouseleave_0_listener() {\n      i0.ɵɵrestoreView(_r27);\n      var _r16 = i0.ɵɵreference(1);\n      return i0.ɵɵresetView(_r16.setAttribute(\"over\", \"false\"));\n    });\n    i0.ɵɵelementStart(2, \"button\", 12)(3, \"mat-icon\", 10);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtext(5);\n    i0.ɵɵelementStart(6, \"input\", 13, 14);\n    i0.ɵɵlistener(\"change\", function FiletreeComponent_mat_tree_node_15_Template_input_change_6_listener($event) {\n      i0.ɵɵrestoreView(_r27);\n      var ctx_r29 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r29.uploadFileWithPathFromName($event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(8, FiletreeComponent_mat_tree_node_15_div_8_Template, 10, 1, \"div\", 6);\n    i0.ɵɵtemplate(9, FiletreeComponent_mat_tree_node_15_mat_progress_bar_9_Template, 1, 0, \"mat-progress-bar\", 15);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    var node_r15 = ctx.$implicit;\n    var _r16 = i0.ɵɵreference(1);\n    var ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵattribute(\"aria-label\", \"toggle \" + node_r15.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.treeControl.isExpanded(node_r15) ? \"folder_open\" : \"folder\", \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", node_r15.name, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"name\", node_r15.path);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", _r16.getAttribute(\"over\") === \"true\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", node_r15.isLoading);\n  }\n}\nfunction FiletreeComponent_mat_error_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    var ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.error, \" \");\n  }\n}\nvar UserFileSystem = /** @class */function () {\n  function UserFileSystem() {\n    // We need such thing because s3 does not support folders\n    this.uiCreatedFolders = new Set();\n    this.fs = new Map();\n  }\n  UserFileSystem.prototype.buildFs = function (files) {\n    var _this = this;\n    this.fs.clear();\n    // maintain consistent order\n    files.concat(Array.from(this.uiCreatedFolders).map(function (it) {\n      return it + \"/\";\n    })).sort().forEach(function (it) {\n      return _this.addEntry(it);\n    });\n  };\n  UserFileSystem.prototype.rootLevelNodes = function () {\n    var res = new Set();\n    this.fs.forEach(function (value, key) {\n      var split = key.split(\"/\", 2);\n      res.add(split[0] + (split.length > 1 ? \"/\" : \"\"));\n    });\n    return Array.from(res);\n  };\n  UserFileSystem.prototype.addEntry = function (path) {\n    var _this = this;\n    var fullPath = \"\";\n    var folder = \"\";\n    path = path.startsWith('/') ? path.substring(1) : path;\n    path.split(\"/\").forEach(function (segment) {\n      fullPath += segment;\n      fullPath += fullPath === path ? \"\" : \"/\";\n      var name = fullPath === path && !path.endsWith(\"/\") ? segment : segment + \"/\";\n      _this.putToFolder(folder, name);\n      folder = fullPath;\n    });\n  };\n  UserFileSystem.prototype.putToFolder = function (folder, name) {\n    if (\"\" === name || \"/\" === name) {\n      name = null;\n    }\n    if (folder === \"\") {\n      folder = name;\n      name = null;\n    }\n    if (!this.fs.has(folder)) {\n      this.fs.set(folder, new Set());\n    }\n    this.fs.get(folder).add(name);\n  };\n  return UserFileSystem;\n}();\nvar DynamicFlatNode = /** @class */function () {\n  function DynamicFlatNode(path) {\n    var level = path.split(\"/\").length - 1;\n    if (path.endsWith(\"/\")) {\n      level = level - 1;\n    }\n    this.name = path.replace(/\\/$/, \"\").match(/(.+\\/)*([^\\/]+)$/)[2];\n    this.path = path;\n    this.level = level;\n    this.expandable = path.endsWith(\"/\");\n  }\n  return DynamicFlatNode;\n}();\nexports.DynamicFlatNode = DynamicFlatNode;\nvar DynamicDatabase = /** @class */function () {\n  function DynamicDatabase() {\n    this.storageTree = new UserFileSystem();\n  }\n  DynamicDatabase.prototype.loadData = function (api, creds, filetreeComponent, router) {\n    var _this = this;\n    api.listDocuments(\"\", creds.getCredentialsForApi()).then(function (res) {\n      _this.storageTree.buildFs(res);\n      filetreeComponent.dataSource.data = _this.storageTree.rootLevelNodes().map(function (path) {\n        return new DynamicFlatNode(path);\n      });\n    }).catch(function (err) {\n      if (err.code === 401 || err.code === 403) {\n        router.navigate(['']);\n        return;\n      }\n      filetreeComponent.error = 'Listing storage failed: ' + app_component_1.ErrorMessageUtil.extract(err);\n    });\n  };\n  DynamicDatabase.prototype.rebuildView = function (filetreeComponent) {\n    var paths = this.memoizedFs();\n    this.storageTree.buildFs(Array.from(paths));\n    filetreeComponent.dataSource.data = this.storageTree.rootLevelNodes().map(function (path) {\n      return new DynamicFlatNode(path);\n    });\n  };\n  DynamicDatabase.prototype.memoizedFs = function () {\n    var paths = new Set();\n    this.storageTree.fs.forEach(function (values, key) {\n      paths.add(key);\n      values.forEach(function (file) {\n        if (null != file) {\n          paths.add(key + file);\n        }\n      });\n    });\n    return paths;\n  };\n  DynamicDatabase.prototype.getChildren = function (node) {\n    return Array.from(this.storageTree.fs.get(node)).filter(function (res) {\n      return res !== null;\n    }).map(function (it) {\n      return node + it;\n    });\n  };\n  return DynamicDatabase;\n}();\nexports.DynamicDatabase = DynamicDatabase;\n/**\n * File database, it can build a tree structured Json object from string.\n * Each node in Json object represents a file or a directory. For a file, it has filename and type.\n * For a directory, it has filename and children (a list of files or directories).\n * The input will be a json object string, and the output is a list of `FileNode` with nested\n * structure.\n */\nvar DynamicDataSource = /** @class */function () {\n  function DynamicDataSource(treeControl, database) {\n    this.treeControl = treeControl;\n    this.database = database;\n    this.expandedMemoize = new Set();\n    this.dataChange = new rxjs_1.BehaviorSubject([]);\n  }\n  Object.defineProperty(DynamicDataSource.prototype, \"data\", {\n    get: function () {\n      return this.dataChange.value;\n    },\n    set: function (value) {\n      this.treeControl.dataNodes = value;\n      this.dataChange.next(value);\n      // keep expanded node visible:\n      this.keepExpandedNodesState();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  DynamicDataSource.prototype.keepExpandedNodesState = function () {\n    var _this = this;\n    var toExpand = new Set(this.expandedMemoize);\n    var expanded = false;\n    do {\n      expanded = false;\n      this.treeControl.dataNodes.filter(function (it) {\n        return toExpand.has(it.path);\n      }).forEach(function (node) {\n        _this.treeControl.expansionModel.select(node);\n        expanded = true;\n        toExpand.delete(node.path);\n      });\n    } while (toExpand.size != 0 && expanded);\n  };\n  DynamicDataSource.prototype.connect = function (collectionViewer) {\n    var _this = this;\n    this.treeControl.expansionModel.changed.subscribe(function (change) {\n      if (change.added || change.removed) {\n        _this.handleTreeControl(change);\n      }\n    });\n    return (0, rxjs_1.merge)(collectionViewer.viewChange, this.dataChange).pipe((0, operators_1.map)(function () {\n      return _this.data;\n    }));\n  };\n  /** Handle expand/collapse behaviors */\n  DynamicDataSource.prototype.handleTreeControl = function (change) {\n    var _this = this;\n    if (change.added) {\n      change.added.forEach(function (node) {\n        return _this.toggleNode(node, true);\n      });\n    }\n    if (change.removed) {\n      change.removed.slice().reverse().forEach(function (node) {\n        return _this.toggleNode(node, false);\n      });\n    }\n  };\n  /**\n   * Toggle the node, remove from display list\n   */\n  DynamicDataSource.prototype.toggleNode = function (node, expand) {\n    var _a;\n    var children = this.database.getChildren(node.path);\n    var index = this.data.indexOf(node);\n    if (!children || index < 0) {\n      // If no children, or cannot find the node, no op\n      return;\n    }\n    if (expand) {\n      this.expandedMemoize.add(node.path);\n      var nodes = children.map(function (path) {\n        return new DynamicFlatNode(path);\n      });\n      (_a = this.data).splice.apply(_a, __spreadArray([index + 1, 0], nodes, false));\n    } else {\n      this.expandedMemoize.delete(node.path);\n      var count = 0;\n      for (var i = index + 1; i < this.data.length && this.data[i].level > node.level; i++, count++) {}\n      this.data.splice(index + 1, count);\n    }\n    this.dataChange.next(this.data);\n  };\n  DynamicDataSource.ɵfac = function DynamicDataSource_Factory(t) {\n    return new (t || DynamicDataSource)(i0.ɵɵinject(i1.FlatTreeControl), i0.ɵɵinject(DynamicDatabase));\n  };\n  DynamicDataSource.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DynamicDataSource,\n    factory: DynamicDataSource.ɵfac\n  });\n  return DynamicDataSource;\n}();\nexports.DynamicDataSource = DynamicDataSource;\nvar AddFolderDialog = /** @class */function () {\n  function AddFolderDialog(dialogRef, data) {\n    this.dialogRef = dialogRef;\n    this.data = data;\n  }\n  AddFolderDialog.prototype.onNoClick = function () {\n    this.dialogRef.close();\n  };\n  AddFolderDialog.ɵfac = function AddFolderDialog_Factory(t) {\n    return new (t || AddFolderDialog)(i0.ɵɵdirectiveInject(i2.MatDialogRef), i0.ɵɵdirectiveInject(dialog_1.MAT_DIALOG_DATA));\n  };\n  AddFolderDialog.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AddFolderDialog,\n    selectors: [[\"add-folder-dialog\"]],\n    decls: 10,\n    vars: 2,\n    consts: [[\"mat-dialog-content\", \"\"], [\"matInput\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"mat-dialog-actions\", \"\"], [\"mat-button\", \"\", 3, \"click\"], [\"mat-button\", \"\", \"cdkFocusInitial\", \"\", 3, \"mat-dialog-close\"]],\n    template: function AddFolderDialog_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"p\");\n        i0.ɵɵtext(2, \"New folder path\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"mat-form-field\")(4, \"input\", 1);\n        i0.ɵɵlistener(\"ngModelChange\", function AddFolderDialog_Template_input_ngModelChange_4_listener($event) {\n          return ctx.data.folderPath = $event;\n        });\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(5, \"div\", 2)(6, \"button\", 3);\n        i0.ɵɵlistener(\"click\", function AddFolderDialog_Template_button_click_6_listener() {\n          return ctx.onNoClick();\n        });\n        i0.ɵɵtext(7, \"Cancel\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"button\", 4);\n        i0.ɵɵtext(9, \"New folder\");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.data.folderPath);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"mat-dialog-close\", ctx.data.folderPath);\n      }\n    },\n    dependencies: [i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel, i4.MatButton, i2.MatDialogClose, i2.MatDialogContent, i2.MatDialogActions, i5.MatInput, i6.MatFormField]\n  });\n  return AddFolderDialog;\n}();\nexports.AddFolderDialog = AddFolderDialog;\n/**\n * @title Tree with dynamic data\n */\nvar FiletreeComponent = /** @class */function () {\n  function FiletreeComponent(database, api, creds, router, dialog) {\n    this.database = database;\n    this.api = api;\n    this.creds = creds;\n    this.router = router;\n    this.dialog = dialog;\n    this.getLevel = function (node) {\n      return node.level;\n    };\n    this.isExpandable = function (node) {\n      return node.expandable;\n    };\n    this.hasChild = function (_, _nodeData) {\n      return _nodeData.expandable;\n    };\n    this.treeControl = new tree_1.FlatTreeControl(this.getLevel, this.isExpandable);\n    this.dataSource = new DynamicDataSource(this.treeControl, database);\n    database.loadData(api, creds, this, router);\n  }\n  FiletreeComponent.prototype.addUiFolderWithPath = function (path) {\n    var _this = this;\n    var dialogRef = this.dialog.open(AddFolderDialog, {\n      width: '250px',\n      data: {\n        folderPath: \"\"\n      }\n    });\n    dialogRef.afterClosed().subscribe(function (result) {\n      if (result !== undefined) {\n        _this.database.storageTree.uiCreatedFolders.add(\"\" !== path ? path + result : result);\n        _this.database.rebuildView(_this);\n      }\n    });\n  };\n  FiletreeComponent.prototype.addUiFolder = function () {\n    this.addUiFolderWithPath(\"\");\n  };\n  FiletreeComponent.prototype.addUiFolderWithpathFromName = function (event) {\n    this.addUiFolderWithPath(event.currentTarget.name);\n  };\n  FiletreeComponent.prototype.loadTree = function () {\n    this.error = '';\n    this.database.loadData(this.api, this.creds, this, this.router);\n  };\n  FiletreeComponent.prototype.downloadFile = function (path) {\n    this.error = '';\n    this.api.downloadDocument(path, this.creds.getCredentialsForApi());\n  };\n  FiletreeComponent.prototype.deleteFile = function (path) {\n    var _this = this;\n    this.error = '';\n    this.removePathFromUiCreatedFolders(path);\n    this.api.deleteDocument(path, this.creds.getCredentialsForApi()).then(function (_) {\n      return _this.loadTree();\n    }).catch(function (err) {\n      return _this.error = 'Delete failed: ' + app_component_1.ErrorMessageUtil.extract(err);\n    });\n  };\n  FiletreeComponent.prototype.removePathFromUiCreatedFolders = function (path) {\n    var _this = this;\n    var pathPrefix = path.replace(/\\/$/, \"\");\n    var toRemove = Array.from(this.database.storageTree.uiCreatedFolders).filter(function (it) {\n      return it.startsWith(pathPrefix);\n    });\n    toRemove.forEach(function (remove) {\n      return _this.database.storageTree.uiCreatedFolders.delete(remove);\n    });\n  };\n  FiletreeComponent.prototype.uploadFile = function (event) {\n    var _this = this;\n    this.error = '';\n    this.api.uploadDocument(event.target.files[0], event.target.files[0].name, this.creds.getCredentialsForApi()).then(function (_) {\n      return _this.loadTree();\n    }).catch(function (err) {\n      _this.error = 'Upload failed: ' + app_component_1.ErrorMessageUtil.extract(err);\n    });\n  };\n  FiletreeComponent.prototype.uploadFileWithPathFromName = function (event) {\n    var _this = this;\n    this.error = '';\n    this.api.uploadDocument(event.currentTarget.files[0], event.currentTarget.name + event.currentTarget.files[0].name, this.creds.getCredentialsForApi()).then(function (_) {\n      return _this.loadTree();\n    }).catch(function (err) {\n      _this.error = 'Upload failed: ' + app_component_1.ErrorMessageUtil.extract(err);\n    });\n  };\n  FiletreeComponent.prototype.refresh = function () {\n    this.error = '';\n    this.database.loadData(this.api, this.creds, this, this.router);\n  };\n  FiletreeComponent.ɵfac = function FiletreeComponent_Factory(t) {\n    return new (t || FiletreeComponent)(i0.ɵɵdirectiveInject(DynamicDatabase), i0.ɵɵdirectiveInject(i7.ApiService), i0.ɵɵdirectiveInject(i8.CredentialsService), i0.ɵɵdirectiveInject(i9.Router), i0.ɵɵdirectiveInject(i2.MatDialog));\n  };\n  FiletreeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FiletreeComponent,\n    selectors: [[\"file-tree\"]],\n    features: [i0.ɵɵProvidersFeature([DynamicDatabase])],\n    decls: 17,\n    vars: 4,\n    consts: [[\"mat-icon-button\", \"\", 3, \"click\"], [\"hidden\", \"\", \"type\", \"file\", 3, \"change\"], [\"uploader\", \"\"], [3, \"dataSource\", \"treeControl\"], [\"matTreeNodePadding\", \"\", 3, \"mouseenter\", \"mouseleave\", 4, \"matTreeNodeDef\"], [\"matTreeNodePadding\", \"\", 3, \"mouseenter\", \"mouseleave\", 4, \"matTreeNodeDef\", \"matTreeNodeDefWhen\"], [4, \"ngIf\"], [\"matTreeNodePadding\", \"\", 3, \"mouseenter\", \"mouseleave\"], [\"activeNode\", \"\"], [\"mat-icon-button\", \"\", \"disabled\", \"\"], [1, \"mat-icon-rtl-mirror\"], [\"activeDirNode\", \"\"], [\"mat-icon-button\", \"\", \"matTreeNodeToggle\", \"\"], [\"hidden\", \"\", \"type\", \"file\", 3, \"name\", \"change\"], [\"uploaderWithPath\", \"\"], [\"mode\", \"indeterminate\", \"class\", \"example-tree-progress-bar\", 4, \"ngIf\"], [\"mat-icon-button\", \"\", 3, \"name\", \"click\"], [\"mode\", \"indeterminate\", 1, \"example-tree-progress-bar\"]],\n    template: function FiletreeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        var _r30 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"div\")(1, \"button\", 0);\n        i0.ɵɵlistener(\"click\", function FiletreeComponent_Template_button_click_1_listener() {\n          return ctx.addUiFolder();\n        });\n        i0.ɵɵelementStart(2, \"mat-icon\");\n        i0.ɵɵtext(3, \"create_new_folder\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(4, \"button\", 0);\n        i0.ɵɵlistener(\"click\", function FiletreeComponent_Template_button_click_4_listener() {\n          i0.ɵɵrestoreView(_r30);\n          var _r0 = i0.ɵɵreference(11);\n          return i0.ɵɵresetView(_r0.click());\n        });\n        i0.ɵɵelementStart(5, \"mat-icon\");\n        i0.ɵɵtext(6, \"cloud_upload\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(7, \"button\", 0);\n        i0.ɵɵlistener(\"click\", function FiletreeComponent_Template_button_click_7_listener() {\n          return ctx.refresh();\n        });\n        i0.ɵɵelementStart(8, \"mat-icon\");\n        i0.ɵɵtext(9, \"refresh\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(10, \"input\", 1, 2);\n        i0.ɵɵlistener(\"change\", function FiletreeComponent_Template_input_change_10_listener($event) {\n          return ctx.uploadFile($event);\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(12, \"div\")(13, \"mat-tree\", 3);\n        i0.ɵɵtemplate(14, FiletreeComponent_mat_tree_node_14_Template, 7, 2, \"mat-tree-node\", 4);\n        i0.ɵɵtemplate(15, FiletreeComponent_mat_tree_node_15_Template, 10, 6, \"mat-tree-node\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(16, FiletreeComponent_mat_error_16_Template, 2, 1, \"mat-error\", 6);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(13);\n        i0.ɵɵproperty(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"matTreeNodeDefWhen\", ctx.hasChild);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", null != ctx.error);\n      }\n    },\n    dependencies: [i10.NgIf, i4.MatIconButton, i11.MatIcon, i6.MatError, i12.MatProgressBar, i13.MatTreeNodeDef, i13.MatTreeNodePadding, i13.MatTreeNodeToggle, i13.MatTree, i13.MatTreeNode]\n  });\n  return FiletreeComponent;\n}();\nexports.FiletreeComponent = FiletreeComponent;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}