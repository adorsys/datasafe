{"ast":null,"code":"import * as i2 from '@angular/cdk/dialog';\nimport { CdkDialogContainer, DialogModule, Dialog } from '@angular/cdk/dialog';\nimport * as i5 from '@angular/cdk/portal';\nimport { PortalModule } from '@angular/cdk/portal';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, Optional, Inject, NgModule, InjectionToken, Injectable, SkipSelf } from '@angular/core';\nimport { AnimationDurations, AnimationCurves, MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport * as i4 from '@angular/cdk/layout';\nimport { Breakpoints } from '@angular/cdk/layout';\nimport * as i3 from '@angular/cdk/overlay';\nimport { DOCUMENT } from '@angular/common';\nimport { trigger, state, style, transition, group, animate, query, animateChild } from '@angular/animations';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Subject, merge } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Animations used by the Material bottom sheet. */\nfunction MatBottomSheetContainer_ng_template_0_Template(rf, ctx) {}\nconst matBottomSheetAnimations = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: /*#__PURE__*/trigger('state', [/*#__PURE__*/state('void, hidden', /*#__PURE__*/style({\n    transform: 'translateY(100%)'\n  })), /*#__PURE__*/state('visible', /*#__PURE__*/style({\n    transform: 'translateY(0%)'\n  })), /*#__PURE__*/transition('visible => void, visible => hidden', /*#__PURE__*/group([/*#__PURE__*/animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`), /*#__PURE__*/query('@*', /*#__PURE__*/animateChild(), {\n    optional: true\n  })])), /*#__PURE__*/transition('void => visible', /*#__PURE__*/group([/*#__PURE__*/animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`), /*#__PURE__*/query('@*', /*#__PURE__*/animateChild(), {\n    optional: true\n  })]))])\n};\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\nlet MatBottomSheetContainer = /*#__PURE__*/(() => {\n  class MatBottomSheetContainer extends CdkDialogContainer {\n    constructor(elementRef, focusTrapFactory, document, config, checker, ngZone, overlayRef, breakpointObserver, _changeDetectorRef, focusMonitor) {\n      super(elementRef, focusTrapFactory, document, config, checker, ngZone, overlayRef, focusMonitor);\n      this._changeDetectorRef = _changeDetectorRef;\n      /** The state of the bottom sheet animations. */\n      this._animationState = 'void';\n      /** Emits whenever the state of the animation changes. */\n      this._animationStateChanged = new EventEmitter();\n      this._breakpointSubscription = breakpointObserver.observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge]).subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium', breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large', breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge', breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n    }\n    /** Begin animation of bottom sheet entrance into view. */\n    enter() {\n      if (!this._destroyed) {\n        this._animationState = 'visible';\n        this._changeDetectorRef.detectChanges();\n      }\n    }\n    /** Begin animation of the bottom sheet exiting from view. */\n    exit() {\n      if (!this._destroyed) {\n        this._animationState = 'hidden';\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    ngOnDestroy() {\n      super.ngOnDestroy();\n      this._breakpointSubscription.unsubscribe();\n      this._destroyed = true;\n    }\n    _onAnimationDone(event) {\n      if (event.toState === 'visible') {\n        this._trapFocus();\n      }\n      this._animationStateChanged.emit(event);\n    }\n    _onAnimationStart(event) {\n      this._animationStateChanged.emit(event);\n    }\n    _captureInitialFocus() {}\n    _toggleClass(cssClass, add) {\n      this._elementRef.nativeElement.classList.toggle(cssClass, add);\n    }\n  }\n  MatBottomSheetContainer.ɵfac = function MatBottomSheetContainer_Factory(t) {\n    return new (t || MatBottomSheetContainer)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.FocusTrapFactory), i0.ɵɵdirectiveInject(DOCUMENT, 8), i0.ɵɵdirectiveInject(i2.DialogConfig), i0.ɵɵdirectiveInject(i1.InteractivityChecker), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i3.OverlayRef), i0.ɵɵdirectiveInject(i4.BreakpointObserver), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.FocusMonitor));\n  };\n  MatBottomSheetContainer.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatBottomSheetContainer,\n    selectors: [[\"mat-bottom-sheet-container\"]],\n    hostAttrs: [\"tabindex\", \"-1\", 1, \"mat-bottom-sheet-container\"],\n    hostVars: 4,\n    hostBindings: function MatBottomSheetContainer_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵsyntheticHostListener(\"@state.start\", function MatBottomSheetContainer_animation_state_start_HostBindingHandler($event) {\n          return ctx._onAnimationStart($event);\n        })(\"@state.done\", function MatBottomSheetContainer_animation_state_done_HostBindingHandler($event) {\n          return ctx._onAnimationDone($event);\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵattribute(\"role\", ctx._config.role)(\"aria-modal\", ctx._config.ariaModal)(\"aria-label\", ctx._config.ariaLabel);\n        i0.ɵɵsyntheticHostProperty(\"@state\", ctx._animationState);\n      }\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 0,\n    consts: [[\"cdkPortalOutlet\", \"\"]],\n    template: function MatBottomSheetContainer_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, MatBottomSheetContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n      }\n    },\n    dependencies: [i5.CdkPortalOutlet],\n    styles: [\".mat-bottom-sheet-container{padding:8px 16px;min-width:100vw;box-sizing:border-box;display:block;outline:0;max-height:80vh;overflow:auto}.cdk-high-contrast-active .mat-bottom-sheet-container{outline:1px solid}.mat-bottom-sheet-container-xlarge,.mat-bottom-sheet-container-large,.mat-bottom-sheet-container-medium{border-top-left-radius:4px;border-top-right-radius:4px}.mat-bottom-sheet-container-medium{min-width:384px;max-width:calc(100vw - 128px)}.mat-bottom-sheet-container-large{min-width:512px;max-width:calc(100vw - 256px)}.mat-bottom-sheet-container-xlarge{min-width:576px;max-width:calc(100vw - 384px)}\"],\n    encapsulation: 2,\n    data: {\n      animation: [matBottomSheetAnimations.bottomSheetState]\n    }\n  });\n  return MatBottomSheetContainer;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet MatBottomSheetModule = /*#__PURE__*/(() => {\n  class MatBottomSheetModule {}\n  MatBottomSheetModule.ɵfac = function MatBottomSheetModule_Factory(t) {\n    return new (t || MatBottomSheetModule)();\n  };\n  MatBottomSheetModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MatBottomSheetModule\n  });\n  MatBottomSheetModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [DialogModule, MatCommonModule, PortalModule, MatCommonModule]\n  });\n  return MatBottomSheetModule;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nconst MAT_BOTTOM_SHEET_DATA = /*#__PURE__*/new InjectionToken('MatBottomSheetData');\n/**\n * Configuration used when opening a bottom sheet.\n */\nclass MatBottomSheetConfig {\n  constructor() {\n    /** Data being injected into the child component. */\n    this.data = null;\n    /** Whether the bottom sheet has a backdrop. */\n    this.hasBackdrop = true;\n    /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n    this.disableClose = false;\n    /** Aria label to assign to the bottom sheet element. */\n    this.ariaLabel = null;\n    /** Whether this is a modal bottom sheet. Used to set the `aria-modal` attribute. */\n    this.ariaModal = true;\n    /**\n     * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n     * Note that this usually doesn't include clicking on links (unless the user is using\n     * the `HashLocationStrategy`).\n     */\n    this.closeOnNavigation = true;\n    // Note that this is set to 'dialog' by default, because while the a11y recommendations\n    // are to focus the first focusable element, doing so prevents screen readers from reading out the\n    // rest of the bottom sheet content.\n    /**\n     * Where the bottom sheet should focus on open.\n     * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or\n     * AutoFocusTarget instead.\n     */\n    this.autoFocus = 'dialog';\n    /**\n     * Whether the bottom sheet should restore focus to the\n     * previously-focused element, after it's closed.\n     */\n    this.restoreFocus = true;\n  }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nclass MatBottomSheetRef {\n  /** Instance of the component making up the content of the bottom sheet. */\n  get instance() {\n    return this._ref.componentInstance;\n  }\n  constructor(_ref, config, containerInstance) {\n    this._ref = _ref;\n    /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n    this._afterOpened = new Subject();\n    this.containerInstance = containerInstance;\n    this.disableClose = config.disableClose;\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(filter(event => event.phaseName === 'done' && event.toState === 'visible'), take(1)).subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(filter(event => event.phaseName === 'done' && event.toState === 'hidden'), take(1)).subscribe(() => {\n      clearTimeout(this._closeFallbackTimeout);\n      this._ref.close(this._result);\n    });\n    _ref.overlayRef.detachments().subscribe(() => {\n      this._ref.close(this._result);\n    });\n    merge(this.backdropClick(), this.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))).subscribe(event => {\n      if (!this.disableClose && (event.type !== 'keydown' || !hasModifierKey(event))) {\n        event.preventDefault();\n        this.dismiss();\n      }\n    });\n  }\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result) {\n    if (!this.containerInstance) {\n      return;\n    }\n    // Transition the backdrop in parallel to the bottom sheet.\n    this.containerInstance._animationStateChanged.pipe(filter(event => event.phaseName === 'start'), take(1)).subscribe(event => {\n      // The logic that disposes of the overlay depends on the exit animation completing, however\n      // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n      // timeout which will clean everything up if the animation hasn't fired within the specified\n      // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n      // vast majority of cases the timeout will have been cleared before it has fired.\n      this._closeFallbackTimeout = setTimeout(() => {\n        this._ref.close(this._result);\n      }, event.totalTime + 100);\n      this._ref.overlayRef.detachBackdrop();\n    });\n    this._result = result;\n    this.containerInstance.exit();\n    this.containerInstance = null;\n  }\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed() {\n    return this._ref.closed;\n  }\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened() {\n    return this._afterOpened;\n  }\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick() {\n    return this._ref.backdropClick;\n  }\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents() {\n    return this._ref.keydownEvents;\n  }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to specify default bottom sheet options. */\nconst MAT_BOTTOM_SHEET_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('mat-bottom-sheet-default-options');\n/**\n * Service to trigger Material Design bottom sheets.\n */\nlet MatBottomSheet = /*#__PURE__*/(() => {\n  class MatBottomSheet {\n    /** Reference to the currently opened bottom sheet. */\n    get _openedBottomSheetRef() {\n      const parent = this._parentBottomSheet;\n      return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n    }\n    set _openedBottomSheetRef(value) {\n      if (this._parentBottomSheet) {\n        this._parentBottomSheet._openedBottomSheetRef = value;\n      } else {\n        this._bottomSheetRefAtThisLevel = value;\n      }\n    }\n    constructor(_overlay, injector, _parentBottomSheet, _defaultOptions) {\n      this._overlay = _overlay;\n      this._parentBottomSheet = _parentBottomSheet;\n      this._defaultOptions = _defaultOptions;\n      this._bottomSheetRefAtThisLevel = null;\n      this._dialog = injector.get(Dialog);\n    }\n    open(componentOrTemplateRef, config) {\n      const _config = {\n        ...(this._defaultOptions || new MatBottomSheetConfig()),\n        ...config\n      };\n      let ref;\n      this._dialog.open(componentOrTemplateRef, {\n        ..._config,\n        // Disable closing since we need to sync it up to the animation ourselves.\n        disableClose: true,\n        // Disable closing on detachments so that we can sync up the animation.\n        closeOnOverlayDetachments: false,\n        maxWidth: '100%',\n        container: MatBottomSheetContainer,\n        scrollStrategy: _config.scrollStrategy || this._overlay.scrollStrategies.block(),\n        positionStrategy: this._overlay.position().global().centerHorizontally().bottom('0'),\n        templateContext: () => ({\n          bottomSheetRef: ref\n        }),\n        providers: (cdkRef, _cdkConfig, container) => {\n          ref = new MatBottomSheetRef(cdkRef, _config, container);\n          return [{\n            provide: MatBottomSheetRef,\n            useValue: ref\n          }, {\n            provide: MAT_BOTTOM_SHEET_DATA,\n            useValue: _config.data\n          }];\n        }\n      });\n      // When the bottom sheet is dismissed, clear the reference to it.\n      ref.afterDismissed().subscribe(() => {\n        // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n        if (this._openedBottomSheetRef === ref) {\n          this._openedBottomSheetRef = null;\n        }\n      });\n      if (this._openedBottomSheetRef) {\n        // If a bottom sheet is already in view, dismiss it and enter the\n        // new bottom sheet after exit animation is complete.\n        this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance?.enter());\n        this._openedBottomSheetRef.dismiss();\n      } else {\n        // If no bottom sheet is in view, enter the new bottom sheet.\n        ref.containerInstance.enter();\n      }\n      this._openedBottomSheetRef = ref;\n      return ref;\n    }\n    /**\n     * Dismisses the currently-visible bottom sheet.\n     * @param result Data to pass to the bottom sheet instance.\n     */\n    dismiss(result) {\n      if (this._openedBottomSheetRef) {\n        this._openedBottomSheetRef.dismiss(result);\n      }\n    }\n    ngOnDestroy() {\n      if (this._bottomSheetRefAtThisLevel) {\n        this._bottomSheetRefAtThisLevel.dismiss();\n      }\n    }\n  }\n  MatBottomSheet.ɵfac = function MatBottomSheet_Factory(t) {\n    return new (t || MatBottomSheet)(i0.ɵɵinject(i3.Overlay), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(MatBottomSheet, 12), i0.ɵɵinject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS, 8));\n  };\n  MatBottomSheet.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MatBottomSheet,\n    factory: MatBottomSheet.ɵfac,\n    providedIn: MatBottomSheetModule\n  });\n  return MatBottomSheet;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_BOTTOM_SHEET_DATA, MAT_BOTTOM_SHEET_DEFAULT_OPTIONS, MatBottomSheet, MatBottomSheetConfig, MatBottomSheetContainer, MatBottomSheetModule, MatBottomSheetRef, matBottomSheetAnimations };\n//# sourceMappingURL=bottom-sheet.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}