{"ast":null,"code":"import { HttpClient } from \"@angular/common/http\";\nimport { of } from \"rxjs\";\nimport { flatMap, map } from \"rxjs/operators\";\nimport { Env } from \"../../app.component\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    static #_ = this.TOKEN_HEADER = \"token\";\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.apiUserName = Env.apiUsername;\n      this.apiPassword = Env.apiPassword;\n      this.uri = Env.apiUrl;\n      this.authorizeUri = this.uri + \"/api/authenticate\";\n      this.createUserUri = this.uri + \"/user\";\n      this.listDocumentUri = this.uri + \"/documents/\";\n      this.putDocumentUri = this.uri + \"/document/\";\n      this.getDocumentUri = this.uri + \"/document/\";\n      this.deleteDocumentUri = this.uri + \"/document/\";\n    }\n    authorize() {\n      let result = this.httpClient.post(this.authorizeUri, {\n        \"userName\": this.apiUserName,\n        \"password\": this.apiPassword\n      }, {\n        observe: 'response'\n      });\n      result.subscribe(res => {\n        this.token = ApiService.extractToken(res);\n      });\n      return result;\n    }\n    createUser(username, password) {\n      console.info(`Creating user using api URL '${this.uri}'`);\n      return this.withAuthorization().pipe(flatMap(token => this.httpClient.put(this.createUserUri, {\n        \"userName\": username,\n        \"password\": password\n      }, ApiService.headers(token)))).toPromise();\n    }\n    listDocuments(path, creds) {\n      return this.withAuthorization().pipe(flatMap(token => this.httpClient.get(this.listDocumentUri + path, ApiService.headersWithAuth(token, creds)))).toPromise();\n    }\n    uploadDocument(document, path, creds) {\n      let formData = new FormData();\n      formData.append('file', document);\n      return this.withAuthorization().pipe(flatMap(token => this.httpClient.put(this.putDocumentUri + path, formData, {\n        \"headers\": ApiService.headersWithAuth(token, creds)[\"headers\"],\n        responseType: 'blob'\n      }))).toPromise();\n    }\n    downloadDocument(path, creds) {\n      this.withAuthorization().pipe(flatMap(token => this.httpClient.get(this.getDocumentUri + path, {\n        \"headers\": ApiService.headersWithAuth(token, creds)[\"headers\"],\n        responseType: 'blob'\n      }))).subscribe(response => {\n        let dataType = response.type;\n        let binaryData = [];\n        binaryData.push(response);\n        let downloadLink = document.createElement('a');\n        downloadLink.href = window.URL.createObjectURL(new Blob(binaryData, {\n          type: dataType\n        }));\n        downloadLink.setAttribute('download', path.match(/(.+\\/)*([^/]+)$/)[2]);\n        document.body.appendChild(downloadLink);\n        downloadLink.click();\n      });\n    }\n    deleteDocument(path, creds) {\n      return this.withAuthorization().pipe(flatMap(token => this.httpClient.delete(this.deleteDocumentUri + path, ApiService.headersWithAuth(token, creds)))).toPromise();\n    }\n    withAuthorization() {\n      if (!this.token) {\n        return this.authorize().pipe(map(res => ApiService.extractToken(res)));\n      }\n      return of(this.token);\n    }\n    static headers(token) {\n      return {\n        \"headers\": {\n          [ApiService.TOKEN_HEADER]: token\n        }\n      };\n    }\n    static headersWithAuth(token, creds) {\n      return {\n        \"headers\": {\n          [ApiService.TOKEN_HEADER]: token,\n          \"user\": creds.username,\n          \"password\": creds.password\n        }\n      };\n    }\n    static extractToken(response) {\n      return response.headers.get(ApiService.TOKEN_HEADER);\n    }\n    static #_2 = this.ɵfac = function ApiService_Factory(t) {\n      return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_3 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ApiService,\n      factory: ApiService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}