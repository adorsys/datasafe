{"ast":null,"code":"import { FlatTreeControl } from '@angular/cdk/tree';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ApiService } from \"../../service/api/api.service\";\nimport { CredentialsService } from \"../../service/credentials/credentials.service\";\nimport { Router } from \"@angular/router\";\nimport { ErrorMessageUtil } from \"../../app.component\";\nimport { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from \"@angular/material/dialog\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/cdk/tree\";\nimport * as i2 from \"@angular/material/dialog\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/material/button\";\nimport * as i5 from \"@angular/material/input\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"../../service/api/api.service\";\nimport * as i8 from \"../../service/credentials/credentials.service\";\nimport * as i9 from \"@angular/router\";\nimport * as i10 from \"@angular/common\";\nimport * as i11 from \"@angular/material/icon\";\nimport * as i12 from \"@angular/material/progress-bar\";\nimport * as i13 from \"@angular/material/tree\";\nfunction FiletreeComponent_mat_tree_node_14_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"button\", 0);\n    i0.ɵɵlistener(\"click\", function FiletreeComponent_mat_tree_node_14_div_6_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const node_r4 = i0.ɵɵnextContext().$implicit;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.downloadFile(node_r4.path));\n    });\n    i0.ɵɵelementStart(2, \"mat-icon\", 10);\n    i0.ɵɵtext(3, \"cloud_download\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"button\", 0);\n    i0.ɵɵlistener(\"click\", function FiletreeComponent_mat_tree_node_14_div_6_Template_button_click_4_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const node_r4 = i0.ɵɵnextContext().$implicit;\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.deleteFile(node_r4.path));\n    });\n    i0.ɵɵelementStart(5, \"mat-icon\", 10);\n    i0.ɵɵtext(6, \"delete_forever\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction FiletreeComponent_mat_tree_node_14_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-tree-node\", 7, 8);\n    i0.ɵɵlistener(\"mouseenter\", function FiletreeComponent_mat_tree_node_14_Template_mat_tree_node_mouseenter_0_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const _r5 = i0.ɵɵreference(1);\n      return i0.ɵɵresetView(_r5.setAttribute(\"over\", \"true\"));\n    })(\"mouseleave\", function FiletreeComponent_mat_tree_node_14_Template_mat_tree_node_mouseleave_0_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const _r5 = i0.ɵɵreference(1);\n      return i0.ɵɵresetView(_r5.setAttribute(\"over\", \"false\"));\n    });\n    i0.ɵɵelementStart(2, \"button\", 9)(3, \"mat-icon\");\n    i0.ɵɵtext(4, \"cloud\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtext(5);\n    i0.ɵɵtemplate(6, FiletreeComponent_mat_tree_node_14_div_6_Template, 7, 0, \"div\", 6);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const node_r4 = ctx.$implicit;\n    const _r5 = i0.ɵɵreference(1);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\" \", node_r4.name, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", _r5.getAttribute(\"over\") === \"true\");\n  }\n}\nfunction FiletreeComponent_mat_tree_node_15_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r21 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"button\", 0);\n    i0.ɵɵlistener(\"click\", function FiletreeComponent_mat_tree_node_15_div_8_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r21);\n      i0.ɵɵnextContext();\n      const _r17 = i0.ɵɵreference(7);\n      return i0.ɵɵresetView(_r17.click());\n    });\n    i0.ɵɵelementStart(2, \"mat-icon\");\n    i0.ɵɵtext(3, \"cloud_upload\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"button\", 16);\n    i0.ɵɵlistener(\"click\", function FiletreeComponent_mat_tree_node_15_div_8_Template_button_click_4_listener($event) {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r22 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r22.addUiFolderWithpathFromName($event));\n    });\n    i0.ɵɵelementStart(5, \"mat-icon\");\n    i0.ɵɵtext(6, \"create_new_folder\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"button\", 0);\n    i0.ɵɵlistener(\"click\", function FiletreeComponent_mat_tree_node_15_div_8_Template_button_click_7_listener() {\n      i0.ɵɵrestoreView(_r21);\n      const node_r15 = i0.ɵɵnextContext().$implicit;\n      const ctx_r23 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r23.deleteFile(node_r15.path));\n    });\n    i0.ɵɵelementStart(8, \"mat-icon\", 10);\n    i0.ɵɵtext(9, \"delete_forever\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const node_r15 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵpropertyInterpolate(\"name\", node_r15.path);\n  }\n}\nfunction FiletreeComponent_mat_tree_node_15_mat_progress_bar_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-progress-bar\", 17);\n  }\n}\nfunction FiletreeComponent_mat_tree_node_15_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r27 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-tree-node\", 7, 11);\n    i0.ɵɵlistener(\"mouseenter\", function FiletreeComponent_mat_tree_node_15_Template_mat_tree_node_mouseenter_0_listener() {\n      i0.ɵɵrestoreView(_r27);\n      const _r16 = i0.ɵɵreference(1);\n      return i0.ɵɵresetView(_r16.setAttribute(\"over\", \"true\"));\n    })(\"mouseleave\", function FiletreeComponent_mat_tree_node_15_Template_mat_tree_node_mouseleave_0_listener() {\n      i0.ɵɵrestoreView(_r27);\n      const _r16 = i0.ɵɵreference(1);\n      return i0.ɵɵresetView(_r16.setAttribute(\"over\", \"false\"));\n    });\n    i0.ɵɵelementStart(2, \"button\", 12)(3, \"mat-icon\", 10);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtext(5);\n    i0.ɵɵelementStart(6, \"input\", 13, 14);\n    i0.ɵɵlistener(\"change\", function FiletreeComponent_mat_tree_node_15_Template_input_change_6_listener($event) {\n      i0.ɵɵrestoreView(_r27);\n      const ctx_r29 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r29.uploadFileWithPathFromName($event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(8, FiletreeComponent_mat_tree_node_15_div_8_Template, 10, 1, \"div\", 6)(9, FiletreeComponent_mat_tree_node_15_mat_progress_bar_9_Template, 1, 0, \"mat-progress-bar\", 15);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const node_r15 = ctx.$implicit;\n    const _r16 = i0.ɵɵreference(1);\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵattribute(\"aria-label\", \"toggle \" + node_r15.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.treeControl.isExpanded(node_r15) ? \"folder_open\" : \"folder\", \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", node_r15.name, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"name\", node_r15.path);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", _r16.getAttribute(\"over\") === \"true\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", node_r15.isLoading);\n  }\n}\nfunction FiletreeComponent_mat_error_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.error, \" \");\n  }\n}\nclass UserFileSystem {\n  constructor() {\n    // We need such thing because s3 does not support folders\n    this.uiCreatedFolders = new Set();\n    this.fs = new Map();\n  }\n  buildFs(files) {\n    this.fs.clear();\n    // maintain consistent order\n    files.concat(Array.from(this.uiCreatedFolders).map(it => it + \"/\")).sort().forEach(it => this.addEntry(it));\n  }\n  rootLevelNodes() {\n    let res = new Set();\n    this.fs.forEach((value, key) => {\n      let split = key.split(\"/\", 2);\n      res.add(split[0] + (split.length > 1 ? \"/\" : \"\"));\n    });\n    return Array.from(res);\n  }\n  addEntry(path) {\n    var fullPath = \"\";\n    var folder = \"\";\n    path = path.startsWith('/') ? path.substring(1) : path;\n    path.split(\"/\").forEach(segment => {\n      fullPath += segment;\n      fullPath += fullPath === path ? \"\" : \"/\";\n      let name = fullPath === path && !path.endsWith(\"/\") ? segment : segment + \"/\";\n      this.putToFolder(folder, name);\n      folder = fullPath;\n    });\n  }\n  putToFolder(folder, name) {\n    if (\"\" === name || \"/\" === name) {\n      name = null;\n    }\n    if (folder === \"\") {\n      folder = name;\n      name = null;\n    }\n    if (!this.fs.has(folder)) {\n      this.fs.set(folder, new Set());\n    }\n    this.fs.get(folder).add(name);\n  }\n}\nexport class DynamicFlatNode {\n  constructor(path) {\n    let level = path.split(\"/\").length - 1;\n    if (path.endsWith(\"/\")) {\n      level = level - 1;\n    }\n    this.name = path.replace(/\\/$/, \"\").match(/(.+\\/)*([^\\/]+)$/)[2];\n    this.path = path;\n    this.level = level;\n    this.expandable = path.endsWith(\"/\");\n  }\n}\nexport class DynamicDatabase {\n  constructor() {\n    this.storageTree = new UserFileSystem();\n  }\n  loadData(api, creds, filetreeComponent, router) {\n    api.listDocuments(\"\", creds.getCredentialsForApi()).then(res => {\n      this.storageTree.buildFs(res);\n      filetreeComponent.dataSource.data = this.storageTree.rootLevelNodes().map(path => new DynamicFlatNode(path));\n    }).catch(err => {\n      if (err.code === 401 || err.code === 403) {\n        router.navigate(['']);\n        return;\n      }\n      filetreeComponent.error = 'Listing storage failed: ' + ErrorMessageUtil.extract(err);\n    });\n  }\n  rebuildView(filetreeComponent) {\n    let paths = this.memoizedFs();\n    this.storageTree.buildFs(Array.from(paths));\n    filetreeComponent.dataSource.data = this.storageTree.rootLevelNodes().map(path => new DynamicFlatNode(path));\n  }\n  memoizedFs() {\n    let paths = new Set();\n    this.storageTree.fs.forEach((values, key) => {\n      paths.add(key);\n      values.forEach(file => {\n        if (null != file) {\n          paths.add(key + file);\n        }\n      });\n    });\n    return paths;\n  }\n  getChildren(node) {\n    return Array.from(this.storageTree.fs.get(node)).filter(res => res !== null).map(it => node + it);\n  }\n}\n/**\n * File database, it can build a tree structured Json object from string.\n * Each node in Json object represents a file or a directory. For a file, it has filename and type.\n * For a directory, it has filename and children (a list of files or directories).\n * The input will be a json object string, and the output is a list of `FileNode` with nested\n * structure.\n */\nexport let DynamicDataSource = /*#__PURE__*/(() => {\n  class DynamicDataSource {\n    get data() {\n      return this.dataChange.value;\n    }\n    set data(value) {\n      this.treeControl.dataNodes = value;\n      this.dataChange.next(value);\n      // keep expanded node visible:\n      this.keepExpandedNodesState();\n    }\n    keepExpandedNodesState() {\n      let toExpand = new Set(this.expandedMemoize);\n      let expanded = false;\n      do {\n        expanded = false;\n        this.treeControl.dataNodes.filter(it => toExpand.has(it.path)).forEach(node => {\n          this.treeControl.expansionModel.select(node);\n          expanded = true;\n          toExpand.delete(node.path);\n        });\n      } while (toExpand.size != 0 && expanded);\n    }\n    constructor(treeControl, database) {\n      this.treeControl = treeControl;\n      this.database = database;\n      this.expandedMemoize = new Set();\n      this.dataChange = new BehaviorSubject([]);\n    }\n    connect(collectionViewer) {\n      this.treeControl.expansionModel.changed.subscribe(change => {\n        if (change.added || change.removed) {\n          this.handleTreeControl(change);\n        }\n      });\n      return merge(collectionViewer.viewChange, this.dataChange).pipe(map(() => this.data));\n    }\n    /** Handle expand/collapse behaviors */\n    handleTreeControl(change) {\n      if (change.added) {\n        change.added.forEach(node => this.toggleNode(node, true));\n      }\n      if (change.removed) {\n        change.removed.slice().reverse().forEach(node => this.toggleNode(node, false));\n      }\n    }\n    /**\n     * Toggle the node, remove from display list\n     */\n    toggleNode(node, expand) {\n      const children = this.database.getChildren(node.path);\n      const index = this.data.indexOf(node);\n      if (!children || index < 0) {\n        // If no children, or cannot find the node, no op\n        return;\n      }\n      if (expand) {\n        this.expandedMemoize.add(node.path);\n        const nodes = children.map(path => new DynamicFlatNode(path));\n        this.data.splice(index + 1, 0, ...nodes);\n      } else {\n        this.expandedMemoize.delete(node.path);\n        let count = 0;\n        for (let i = index + 1; i < this.data.length && this.data[i].level > node.level; i++, count++) {}\n        this.data.splice(index + 1, count);\n      }\n      this.dataChange.next(this.data);\n    }\n    static #_ = this.ɵfac = function DynamicDataSource_Factory(t) {\n      return new (t || DynamicDataSource)(i0.ɵɵinject(i1.FlatTreeControl), i0.ɵɵinject(DynamicDatabase));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: DynamicDataSource,\n      factory: DynamicDataSource.ɵfac\n    });\n  }\n  return DynamicDataSource;\n})();\nexport let AddFolderDialog = /*#__PURE__*/(() => {\n  class AddFolderDialog {\n    constructor(dialogRef, data) {\n      this.dialogRef = dialogRef;\n      this.data = data;\n    }\n    onNoClick() {\n      this.dialogRef.close();\n    }\n    static #_ = this.ɵfac = function AddFolderDialog_Factory(t) {\n      return new (t || AddFolderDialog)(i0.ɵɵdirectiveInject(i2.MatDialogRef), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddFolderDialog,\n      selectors: [[\"add-folder-dialog\"]],\n      decls: 10,\n      vars: 2,\n      consts: [[\"mat-dialog-content\", \"\"], [\"matInput\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"mat-dialog-actions\", \"\"], [\"mat-button\", \"\", 3, \"click\"], [\"mat-button\", \"\", \"cdkFocusInitial\", \"\", 3, \"mat-dialog-close\"]],\n      template: function AddFolderDialog_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"p\");\n          i0.ɵɵtext(2, \"New folder path\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"mat-form-field\")(4, \"input\", 1);\n          i0.ɵɵlistener(\"ngModelChange\", function AddFolderDialog_Template_input_ngModelChange_4_listener($event) {\n            return ctx.data.folderPath = $event;\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(5, \"div\", 2)(6, \"button\", 3);\n          i0.ɵɵlistener(\"click\", function AddFolderDialog_Template_button_click_6_listener() {\n            return ctx.onNoClick();\n          });\n          i0.ɵɵtext(7, \"Cancel\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(8, \"button\", 4);\n          i0.ɵɵtext(9, \"New folder\");\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngModel\", ctx.data.folderPath);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"mat-dialog-close\", ctx.data.folderPath);\n        }\n      },\n      dependencies: [i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel, i4.MatButton, i2.MatDialogClose, i2.MatDialogContent, i2.MatDialogActions, i5.MatInput, i6.MatFormField]\n    });\n  }\n  return AddFolderDialog;\n})();\n/**\n * @title Tree with dynamic data\n */\nexport let FiletreeComponent = /*#__PURE__*/(() => {\n  class FiletreeComponent {\n    constructor(database, api, creds, router, dialog) {\n      this.database = database;\n      this.api = api;\n      this.creds = creds;\n      this.router = router;\n      this.dialog = dialog;\n      this.getLevel = node => node.level;\n      this.isExpandable = node => node.expandable;\n      this.hasChild = (_, _nodeData) => _nodeData.expandable;\n      this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable);\n      this.dataSource = new DynamicDataSource(this.treeControl, database);\n      database.loadData(api, creds, this, router);\n    }\n    addUiFolderWithPath(path) {\n      const dialogRef = this.dialog.open(AddFolderDialog, {\n        width: '250px',\n        data: {\n          folderPath: \"\"\n        }\n      });\n      dialogRef.afterClosed().subscribe(result => {\n        if (result !== undefined) {\n          this.database.storageTree.uiCreatedFolders.add(\"\" !== path ? path + result : result);\n          this.database.rebuildView(this);\n        }\n      });\n    }\n    addUiFolder() {\n      this.addUiFolderWithPath(\"\");\n    }\n    addUiFolderWithpathFromName(event) {\n      this.addUiFolderWithPath(event.currentTarget.name);\n    }\n    loadTree() {\n      this.error = '';\n      this.database.loadData(this.api, this.creds, this, this.router);\n    }\n    downloadFile(path) {\n      this.error = '';\n      this.api.downloadDocument(path, this.creds.getCredentialsForApi());\n    }\n    deleteFile(path) {\n      this.error = '';\n      this.removePathFromUiCreatedFolders(path);\n      this.api.deleteDocument(path, this.creds.getCredentialsForApi()).then(_ => this.loadTree()).catch(err => this.error = 'Delete failed: ' + ErrorMessageUtil.extract(err));\n    }\n    removePathFromUiCreatedFolders(path) {\n      let pathPrefix = path.replace(/\\/$/, \"\");\n      let toRemove = Array.from(this.database.storageTree.uiCreatedFolders).filter(it => it.startsWith(pathPrefix));\n      toRemove.forEach(remove => this.database.storageTree.uiCreatedFolders.delete(remove));\n    }\n    uploadFile(event) {\n      this.error = '';\n      this.api.uploadDocument(event.target.files[0], event.target.files[0].name, this.creds.getCredentialsForApi()).then(_ => this.loadTree()).catch(err => {\n        this.error = 'Upload failed: ' + ErrorMessageUtil.extract(err);\n      });\n    }\n    uploadFileWithPathFromName(event) {\n      this.error = '';\n      this.api.uploadDocument(event.currentTarget.files[0], event.currentTarget.name + event.currentTarget.files[0].name, this.creds.getCredentialsForApi()).then(_ => this.loadTree()).catch(err => {\n        this.error = 'Upload failed: ' + ErrorMessageUtil.extract(err);\n      });\n    }\n    refresh() {\n      this.error = '';\n      this.database.loadData(this.api, this.creds, this, this.router);\n    }\n    static #_ = this.ɵfac = function FiletreeComponent_Factory(t) {\n      return new (t || FiletreeComponent)(i0.ɵɵdirectiveInject(DynamicDatabase), i0.ɵɵdirectiveInject(i7.ApiService), i0.ɵɵdirectiveInject(i8.CredentialsService), i0.ɵɵdirectiveInject(i9.Router), i0.ɵɵdirectiveInject(i2.MatDialog));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: FiletreeComponent,\n      selectors: [[\"file-tree\"]],\n      features: [i0.ɵɵProvidersFeature([DynamicDatabase])],\n      decls: 17,\n      vars: 4,\n      consts: [[\"mat-icon-button\", \"\", 3, \"click\"], [\"hidden\", \"\", \"type\", \"file\", 3, \"change\"], [\"uploader\", \"\"], [3, \"dataSource\", \"treeControl\"], [\"matTreeNodePadding\", \"\", 3, \"mouseenter\", \"mouseleave\", 4, \"matTreeNodeDef\"], [\"matTreeNodePadding\", \"\", 3, \"mouseenter\", \"mouseleave\", 4, \"matTreeNodeDef\", \"matTreeNodeDefWhen\"], [4, \"ngIf\"], [\"matTreeNodePadding\", \"\", 3, \"mouseenter\", \"mouseleave\"], [\"activeNode\", \"\"], [\"mat-icon-button\", \"\", \"disabled\", \"\"], [1, \"mat-icon-rtl-mirror\"], [\"activeDirNode\", \"\"], [\"mat-icon-button\", \"\", \"matTreeNodeToggle\", \"\"], [\"hidden\", \"\", \"type\", \"file\", 3, \"name\", \"change\"], [\"uploaderWithPath\", \"\"], [\"mode\", \"indeterminate\", \"class\", \"example-tree-progress-bar\", 4, \"ngIf\"], [\"mat-icon-button\", \"\", 3, \"name\", \"click\"], [\"mode\", \"indeterminate\", 1, \"example-tree-progress-bar\"]],\n      template: function FiletreeComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          const _r30 = i0.ɵɵgetCurrentView();\n          i0.ɵɵelementStart(0, \"div\")(1, \"button\", 0);\n          i0.ɵɵlistener(\"click\", function FiletreeComponent_Template_button_click_1_listener() {\n            return ctx.addUiFolder();\n          });\n          i0.ɵɵelementStart(2, \"mat-icon\");\n          i0.ɵɵtext(3, \"create_new_folder\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(4, \"button\", 0);\n          i0.ɵɵlistener(\"click\", function FiletreeComponent_Template_button_click_4_listener() {\n            i0.ɵɵrestoreView(_r30);\n            const _r0 = i0.ɵɵreference(11);\n            return i0.ɵɵresetView(_r0.click());\n          });\n          i0.ɵɵelementStart(5, \"mat-icon\");\n          i0.ɵɵtext(6, \"cloud_upload\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(7, \"button\", 0);\n          i0.ɵɵlistener(\"click\", function FiletreeComponent_Template_button_click_7_listener() {\n            return ctx.refresh();\n          });\n          i0.ɵɵelementStart(8, \"mat-icon\");\n          i0.ɵɵtext(9, \"refresh\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(10, \"input\", 1, 2);\n          i0.ɵɵlistener(\"change\", function FiletreeComponent_Template_input_change_10_listener($event) {\n            return ctx.uploadFile($event);\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(12, \"div\")(13, \"mat-tree\", 3);\n          i0.ɵɵtemplate(14, FiletreeComponent_mat_tree_node_14_Template, 7, 2, \"mat-tree-node\", 4)(15, FiletreeComponent_mat_tree_node_15_Template, 10, 6, \"mat-tree-node\", 5);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(16, FiletreeComponent_mat_error_16_Template, 2, 1, \"mat-error\", 6);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(13);\n          i0.ɵɵproperty(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"matTreeNodeDefWhen\", ctx.hasChild);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", null != ctx.error);\n        }\n      },\n      dependencies: [i10.NgIf, i4.MatIconButton, i11.MatIcon, i6.MatError, i12.MatProgressBar, i13.MatTreeNodeDef, i13.MatTreeNodePadding, i13.MatTreeNodeToggle, i13.MatTree, i13.MatTreeNode]\n    });\n  }\n  return FiletreeComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}